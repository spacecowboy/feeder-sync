// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: legacy_feeds.sql

package db

import (
	"context"
)

const selectAllLegacyFeeds = `-- name: SelectAllLegacyFeeds :many
SELECT content_hash, content, etag, user_db_id
FROM legacy_feeds
`

type SelectAllLegacyFeedsRow struct {
	ContentHash int64
	Content     string
	Etag        string
	UserDbID    int64
}

func (q *Queries) SelectAllLegacyFeeds(ctx context.Context) ([]SelectAllLegacyFeedsRow, error) {
	rows, err := q.db.Query(ctx, selectAllLegacyFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllLegacyFeedsRow
	for rows.Next() {
		var i SelectAllLegacyFeedsRow
		if err := rows.Scan(
			&i.ContentHash,
			&i.Content,
			&i.Etag,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLegacyFeeds = `-- name: SelectLegacyFeeds :many
SELECT user_id, content_hash, content, etag
FROM legacy_feeds
INNER JOIN users ON legacy_feeds.user_db_id = users.db_id
WHERE user_id = $1
`

type SelectLegacyFeedsRow struct {
	UserID      string
	ContentHash int64
	Content     string
	Etag        string
}

func (q *Queries) SelectLegacyFeeds(ctx context.Context, userID string) ([]SelectLegacyFeedsRow, error) {
	rows, err := q.db.Query(ctx, selectLegacyFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectLegacyFeedsRow
	for rows.Next() {
		var i SelectLegacyFeedsRow
		if err := rows.Scan(
			&i.UserID,
			&i.ContentHash,
			&i.Content,
			&i.Etag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLegacyFeeds = `-- name: UpdateLegacyFeeds :exec
INSERT INTO legacy_feeds (user_db_id, content_hash, content, etag)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_db_id) DO UPDATE
SET content_hash = excluded.content_hash,
    content = excluded.content,
    etag = excluded.etag
`

type UpdateLegacyFeedsParams struct {
	UserDbID    int64
	ContentHash int64
	Content     string
	Etag        string
}

func (q *Queries) UpdateLegacyFeeds(ctx context.Context, arg UpdateLegacyFeedsParams) error {
	_, err := q.db.Exec(ctx, updateLegacyFeeds,
		arg.UserDbID,
		arg.ContentHash,
		arg.Content,
		arg.Etag,
	)
	return err
}
