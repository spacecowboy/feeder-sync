// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: legacy_feeds.sql

package db

import (
	"context"
)

const getAllLegacyFeeds = `-- name: GetAllLegacyFeeds :many
SELECT content_hash, content, etag, user_db_id
FROM legacy_feeds
`

type GetAllLegacyFeedsRow struct {
	ContentHash int64
	Content     string
	Etag        string
	UserDbID    int64
}

func (q *Queries) GetAllLegacyFeeds(ctx context.Context) ([]GetAllLegacyFeedsRow, error) {
	rows, err := q.db.Query(ctx, getAllLegacyFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllLegacyFeedsRow
	for rows.Next() {
		var i GetAllLegacyFeedsRow
		if err := rows.Scan(
			&i.ContentHash,
			&i.Content,
			&i.Etag,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLegacyFeeds = `-- name: GetLegacyFeeds :one
SELECT user_id, content_hash, content, etag
FROM legacy_feeds
INNER JOIN users ON legacy_feeds.user_db_id = users.db_id
WHERE user_id = $1
LIMIT 1
`

type GetLegacyFeedsRow struct {
	UserID      string
	ContentHash int64
	Content     string
	Etag        string
}

func (q *Queries) GetLegacyFeeds(ctx context.Context, userID string) (GetLegacyFeedsRow, error) {
	row := q.db.QueryRow(ctx, getLegacyFeeds, userID)
	var i GetLegacyFeedsRow
	err := row.Scan(
		&i.UserID,
		&i.ContentHash,
		&i.Content,
		&i.Etag,
	)
	return i, err
}

const getLegacyFeedsEtag = `-- name: GetLegacyFeedsEtag :one
select
    etag
from legacy_feeds
inner join users on legacy_feeds.user_db_id = users.db_id
where user_id = $1
limit 1
`

func (q *Queries) GetLegacyFeedsEtag(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRow(ctx, getLegacyFeedsEtag, userID)
	var etag string
	err := row.Scan(&etag)
	return etag, err
}

const updateLegacyFeeds = `-- name: UpdateLegacyFeeds :one
INSERT INTO legacy_feeds (user_db_id, content_hash, content, etag)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_db_id) DO UPDATE
SET content_hash = excluded.content_hash,
    content = excluded.content,
    etag = excluded.etag
RETURNING db_id
`

type UpdateLegacyFeedsParams struct {
	UserDbID    int64
	ContentHash int64
	Content     string
	Etag        string
}

func (q *Queries) UpdateLegacyFeeds(ctx context.Context, arg UpdateLegacyFeedsParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateLegacyFeeds,
		arg.UserDbID,
		arg.ContentHash,
		arg.Content,
		arg.Etag,
	)
	var db_id int64
	err := row.Scan(&db_id)
	return db_id, err
}
