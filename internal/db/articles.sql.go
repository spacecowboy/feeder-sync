// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: articles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllArticles = `-- name: GetAllArticles :many
SELECT read_time, identifier, updated_at, user_db_id
FROM articles
`

type GetAllArticlesRow struct {
	ReadTime   pgtype.Timestamptz
	Identifier string
	UpdatedAt  pgtype.Timestamptz
	UserDbID   int64
}

func (q *Queries) GetAllArticles(ctx context.Context) ([]GetAllArticlesRow, error) {
	rows, err := q.db.Query(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllArticlesRow
	for rows.Next() {
		var i GetAllArticlesRow
		if err := rows.Scan(
			&i.ReadTime,
			&i.Identifier,
			&i.UpdatedAt,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticles = `-- name: GetArticles :many
SELECT user_id, read_time, identifier, updated_at
FROM articles
INNER JOIN users ON articles.user_db_id = users.db_id
WHERE users.user_id = $1 AND updated_at > $2
ORDER BY read_time DESC
LIMIT 1000
`

type GetArticlesParams struct {
	UserID    string
	UpdatedAt pgtype.Timestamptz
}

type GetArticlesRow struct {
	UserID     string
	ReadTime   pgtype.Timestamptz
	Identifier string
	UpdatedAt  pgtype.Timestamptz
}

func (q *Queries) GetArticles(ctx context.Context, arg GetArticlesParams) ([]GetArticlesRow, error) {
	rows, err := q.db.Query(ctx, getArticles, arg.UserID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArticlesRow
	for rows.Next() {
		var i GetArticlesRow
		if err := rows.Scan(
			&i.UserID,
			&i.ReadTime,
			&i.Identifier,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertArticle = `-- name: InsertArticle :one
INSERT INTO articles (user_db_id, identifier, read_time, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING db_id
`

type InsertArticleParams struct {
	UserDbID   int64
	Identifier string
	ReadTime   pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

func (q *Queries) InsertArticle(ctx context.Context, arg InsertArticleParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertArticle,
		arg.UserDbID,
		arg.Identifier,
		arg.ReadTime,
		arg.UpdatedAt,
	)
	var db_id int64
	err := row.Scan(&db_id)
	return db_id, err
}
