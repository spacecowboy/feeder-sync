// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE user_db_id = $1 AND device_id = $2
`

type DeleteDeviceParams struct {
	UserDbID int64
	DeviceID string
}

func (q *Queries) DeleteDevice(ctx context.Context, arg DeleteDeviceParams) error {
	_, err := q.db.Exec(ctx, deleteDevice, arg.UserDbID, arg.DeviceID)
	return err
}

const deleteDeviceWithLegacyId = `-- name: DeleteDeviceWithLegacyId :exec
delete from devices
where user_db_id = $1 and legacy_device_id = $2
`

type DeleteDeviceWithLegacyIdParams struct {
	UserDbID       int64
	LegacyDeviceID int64
}

func (q *Queries) DeleteDeviceWithLegacyId(ctx context.Context, arg DeleteDeviceWithLegacyIdParams) error {
	_, err := q.db.Exec(ctx, deleteDeviceWithLegacyId, arg.UserDbID, arg.LegacyDeviceID)
	return err
}

const getAllDevices = `-- name: GetAllDevices :many
SELECT db_id, device_id, device_name, last_seen, legacy_device_id, user_db_id FROM devices
`

func (q *Queries) GetAllDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getAllDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.DbID,
			&i.DeviceID,
			&i.DeviceName,
			&i.LastSeen,
			&i.LegacyDeviceID,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevices = `-- name: GetDevices :many
SELECT devices.db_id, devices.device_id, devices.device_name, devices.last_seen, devices.legacy_device_id, devices.user_db_id, users.db_id, users.user_id, users.legacy_sync_code
FROM devices
INNER JOIN users ON devices.user_db_id = users.db_id
WHERE user_id = $1
`

type GetDevicesRow struct {
	Device Device
	User   User
}

func (q *Queries) GetDevices(ctx context.Context, userID string) ([]GetDevicesRow, error) {
	rows, err := q.db.Query(ctx, getDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesRow
	for rows.Next() {
		var i GetDevicesRow
		if err := rows.Scan(
			&i.Device.DbID,
			&i.Device.DeviceID,
			&i.Device.DeviceName,
			&i.Device.LastSeen,
			&i.Device.LegacyDeviceID,
			&i.Device.UserDbID,
			&i.User.DbID,
			&i.User.UserID,
			&i.User.LegacySyncCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLegacyDevice = `-- name: GetLegacyDevice :one
select
    devices.db_id, devices.device_id, devices.device_name, devices.last_seen, devices.legacy_device_id, devices.user_db_id, users.db_id, users.user_id, users.legacy_sync_code
from devices
inner join users on devices.user_db_id = users.db_id
where legacy_sync_code = $1 and legacy_device_id = $2
limit 1
`

type GetLegacyDeviceParams struct {
	LegacySyncCode string
	LegacyDeviceID int64
}

type GetLegacyDeviceRow struct {
	Device Device
	User   User
}

func (q *Queries) GetLegacyDevice(ctx context.Context, arg GetLegacyDeviceParams) (GetLegacyDeviceRow, error) {
	row := q.db.QueryRow(ctx, getLegacyDevice, arg.LegacySyncCode, arg.LegacyDeviceID)
	var i GetLegacyDeviceRow
	err := row.Scan(
		&i.Device.DbID,
		&i.Device.DeviceID,
		&i.Device.DeviceName,
		&i.Device.LastSeen,
		&i.Device.LegacyDeviceID,
		&i.Device.UserDbID,
		&i.User.DbID,
		&i.User.UserID,
		&i.User.LegacySyncCode,
	)
	return i, err
}

const getLegacyDevicesEtag = `-- name: GetLegacyDevicesEtag :one
SELECT sha256(convert_to(string_agg(device_name, '' ORDER BY device_name), 'UTF8'))
FROM devices
INNER JOIN users ON devices.user_db_id = users.db_id
WHERE legacy_sync_code = $1
GROUP BY user_db_id
`

func (q *Queries) GetLegacyDevicesEtag(ctx context.Context, legacySyncCode string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getLegacyDevicesEtag, legacySyncCode)
	var sha256 []byte
	err := row.Scan(&sha256)
	return sha256, err
}

const insertDevice = `-- name: InsertDevice :one
INSERT INTO devices (device_id, device_name, last_seen, legacy_device_id, user_db_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING db_id, device_id, device_name, last_seen, legacy_device_id, user_db_id
`

type InsertDeviceParams struct {
	DeviceID       string
	DeviceName     string
	LastSeen       pgtype.Timestamptz
	LegacyDeviceID int64
	UserDbID       int64
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, insertDevice,
		arg.DeviceID,
		arg.DeviceName,
		arg.LastSeen,
		arg.LegacyDeviceID,
		arg.UserDbID,
	)
	var i Device
	err := row.Scan(
		&i.DbID,
		&i.DeviceID,
		&i.DeviceName,
		&i.LastSeen,
		&i.LegacyDeviceID,
		&i.UserDbID,
	)
	return i, err
}

const updateLastSeenForDevice = `-- name: UpdateLastSeenForDevice :exec
UPDATE devices
SET last_seen = $1
WHERE db_id = $2
`

type UpdateLastSeenForDeviceParams struct {
	LastSeen pgtype.Timestamptz
	DbID     int64
}

func (q *Queries) UpdateLastSeenForDevice(ctx context.Context, arg UpdateLastSeenForDeviceParams) error {
	_, err := q.db.Exec(ctx, updateLastSeenForDevice, arg.LastSeen, arg.DbID)
	return err
}
