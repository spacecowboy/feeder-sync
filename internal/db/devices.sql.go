// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE user_db_id = $1 AND device_id = $2
`

type DeleteDeviceParams struct {
	UserDbID int64
	DeviceID string
}

func (q *Queries) DeleteDevice(ctx context.Context, arg DeleteDeviceParams) error {
	_, err := q.db.Exec(ctx, deleteDevice, arg.UserDbID, arg.DeviceID)
	return err
}

const insertDevice = `-- name: InsertDevice :one
INSERT INTO devices (device_id, device_name, last_seen, user_db_id)
VALUES ($1, $2, $3, $4) RETURNING db_id
`

type InsertDeviceParams struct {
	DeviceID   string
	DeviceName string
	LastSeen   pgtype.Timestamptz
	UserDbID   int64
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertDevice,
		arg.DeviceID,
		arg.DeviceName,
		arg.LastSeen,
		arg.UserDbID,
	)
	var db_id int64
	err := row.Scan(&db_id)
	return db_id, err
}

const selectAllDevices = `-- name: SelectAllDevices :many
SELECT user_db_id, device_id, device_name, last_seen FROM devices
`

type SelectAllDevicesRow struct {
	UserDbID   int64
	DeviceID   string
	DeviceName string
	LastSeen   pgtype.Timestamptz
}

func (q *Queries) SelectAllDevices(ctx context.Context) ([]SelectAllDevicesRow, error) {
	rows, err := q.db.Query(ctx, selectAllDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllDevicesRow
	for rows.Next() {
		var i SelectAllDevicesRow
		if err := rows.Scan(
			&i.UserDbID,
			&i.DeviceID,
			&i.DeviceName,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectDevices = `-- name: SelectDevices :many
SELECT users.db_id, user_id, device_id, device_name, last_seen
FROM devices
INNER JOIN users ON devices.user_db_id = users.db_id
WHERE user_id = $1
`

type SelectDevicesRow struct {
	DbID       int64
	UserID     string
	DeviceID   string
	DeviceName string
	LastSeen   pgtype.Timestamptz
}

func (q *Queries) SelectDevices(ctx context.Context, userID string) ([]SelectDevicesRow, error) {
	rows, err := q.db.Query(ctx, selectDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectDevicesRow
	for rows.Next() {
		var i SelectDevicesRow
		if err := rows.Scan(
			&i.DbID,
			&i.UserID,
			&i.DeviceID,
			&i.DeviceName,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLegacyDevicesEtag = `-- name: SelectLegacyDevicesEtag :one
SELECT sha256(convert_to(string_agg(device_name, '' ORDER BY device_name), 'UTF8'))
FROM devices
INNER JOIN users ON devices.user_db_id = users.db_id
WHERE legacy_sync_code = $1
GROUP BY user_db_id
`

func (q *Queries) SelectLegacyDevicesEtag(ctx context.Context, legacySyncCode string) ([]byte, error) {
	row := q.db.QueryRow(ctx, selectLegacyDevicesEtag, legacySyncCode)
	var sha256 []byte
	err := row.Scan(&sha256)
	return sha256, err
}

const updateLastSeenForDevice = `-- name: UpdateLastSeenForDevice :exec
UPDATE devices
SET last_seen = $1
WHERE user_db_id = $2 AND device_id = $3
`

type UpdateLastSeenForDeviceParams struct {
	LastSeen pgtype.Timestamptz
	UserDbID int64
	DeviceID string
}

func (q *Queries) UpdateLastSeenForDevice(ctx context.Context, arg UpdateLastSeenForDeviceParams) error {
	_, err := q.db.Exec(ctx, updateLastSeenForDevice, arg.LastSeen, arg.UserDbID, arg.DeviceID)
	return err
}
