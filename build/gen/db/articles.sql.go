// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: articles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllArticles = `-- name: GetAllArticles :many
SELECT
    db_id, read_time, identifier, updated_at, user_db_id
FROM articles
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.Query(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.DbID,
			&i.ReadTime,
			&i.Identifier,
			&i.UpdatedAt,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticlesUpdatedSince = `-- name: GetArticlesUpdatedSince :many
SELECT
    db_id, read_time, identifier, updated_at, user_db_id
FROM articles
WHERE user_db_id = $1 AND updated_at > $2
ORDER BY read_time DESC
LIMIT 1000
`

type GetArticlesUpdatedSinceParams struct {
	UserDbID  int64
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetArticlesUpdatedSince(ctx context.Context, arg GetArticlesUpdatedSinceParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, getArticlesUpdatedSince, arg.UserDbID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.DbID,
			&i.ReadTime,
			&i.Identifier,
			&i.UpdatedAt,
			&i.UserDbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertArticle = `-- name: InsertArticle :one
INSERT INTO articles (user_db_id, identifier, read_time, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING db_id, read_time, identifier, updated_at, user_db_id
`

type InsertArticleParams struct {
	UserDbID   int64
	Identifier string
	ReadTime   pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

func (q *Queries) InsertArticle(ctx context.Context, arg InsertArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, insertArticle,
		arg.UserDbID,
		arg.Identifier,
		arg.ReadTime,
		arg.UpdatedAt,
	)
	var i Article
	err := row.Scan(
		&i.DbID,
		&i.ReadTime,
		&i.Identifier,
		&i.UpdatedAt,
		&i.UserDbID,
	)
	return i, err
}
