// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT
    db_id,
    user_id
FROM users
`

type GetAllUsersRow struct {
	DbID   int64
	UserID string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.DbID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBySyncCode = `-- name: GetUserBySyncCode :one
SELECT db_id, user_id, legacy_sync_code FROM users WHERE legacy_sync_code = $1 LIMIT 1
`

func (q *Queries) GetUserBySyncCode(ctx context.Context, legacySyncCode string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySyncCode, legacySyncCode)
	var i User
	err := row.Scan(&i.DbID, &i.UserID, &i.LegacySyncCode)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
SELECT db_id, user_id, legacy_sync_code FROM users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByUserId(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserId, userID)
	var i User
	err := row.Scan(&i.DbID, &i.UserID, &i.LegacySyncCode)
	return i, err
}

const getUserDbId = `-- name: GetUserDbId :one
SELECT db_id FROM users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserDbId(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getUserDbId, userID)
	var db_id int64
	err := row.Scan(&db_id)
	return db_id, err
}

const getUserDbIdBySyncCode = `-- name: GetUserDbIdBySyncCode :one
SELECT db_id FROM users WHERE legacy_sync_code = $1 LIMIT 1
`

func (q *Queries) GetUserDbIdBySyncCode(ctx context.Context, legacySyncCode string) (int64, error) {
	row := q.db.QueryRow(ctx, getUserDbIdBySyncCode, legacySyncCode)
	var db_id int64
	err := row.Scan(&db_id)
	return db_id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (user_id, legacy_sync_code)
VALUES ($1, $2)
RETURNING db_id, user_id, legacy_sync_code
`

type InsertUserParams struct {
	UserID         string
	LegacySyncCode string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.UserID, arg.LegacySyncCode)
	var i User
	err := row.Scan(&i.DbID, &i.UserID, &i.LegacySyncCode)
	return i, err
}
